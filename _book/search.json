[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "stats",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\nSome more content"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "3  Introduction",
    "section": "",
    "text": "See Knuth (1984) for additional discussion of literate programming.\n#| label: fig-polar #| fig-cap: “A line plot on a polar axis”\nimport numpy as np import matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01) theta = 4 * np.pi * r fig, ax = plt.subplots( subplot_kw = {‘projection’: ‘polar’} ) ax.plot(theta, r) ax.set_rticks([0.5, 1, 1.5, 2]) ax.grid(True) plt.show()\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "2  Quarto Basics 2",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 2.1.\n\n\n\n\n\nFigure 2.1: A line plot on a polar axis"
  },
  {
    "objectID": "Chap 1 Reading data.html",
    "href": "Chap 1 Reading data.html",
    "title": "1  Reading data",
    "section": "",
    "text": "Reading data is the first step to extract information from it. Data can exist broadly in two formats:\n\nStructured data and,\nUntructured data.\n\nStructured data is typically stored in a tabular form, where rows in the data correspond to “observations” and columns correspond to “variables”. For example, the following dataset contains 5 observations, where each observation (or row) consists of information about a movie. The variables (or columns) contain different pieces of information about a given movie. As all variables for a given row are related to the same movie, the data below is also called as relational data.\n\n\n\n\n\n\n  \n    \n      \n      Title\n      US Gross\n      Production Budget\n      Release Date\n      Major Genre\n      Creative Type\n      Rotten Tomatoes Rating\n      IMDB Rating\n    \n  \n  \n    \n      0\n      The Shawshank Redemption\n      28241469\n      25000000\n      Sep 23 1994\n      Drama\n      Fiction\n      88\n      9.2\n    \n    \n      1\n      Inception\n      285630280\n      160000000\n      Jul 16 2010\n      Horror/Thriller\n      Fiction\n      87\n      9.1\n    \n    \n      2\n      One Flew Over the Cuckoo's Nest\n      108981275\n      4400000\n      Nov 19 1975\n      Comedy\n      Fiction\n      96\n      8.9\n    \n    \n      3\n      The Dark Knight\n      533345358\n      185000000\n      Jul 18 2008\n      Action/Adventure\n      Fiction\n      93\n      8.9\n    \n    \n      4\n      Schindler's List\n      96067179\n      25000000\n      Dec 15 1993\n      Drama\n      Non-Fiction\n      97\n      8.9\n    \n  \n\n\n\n\nUnstructured data is data that is not organized in any pre-defined manner. Examples of unstructured data can be text files, audio/video files, images, Internet of Things (IoT) data, etc. Unstructured data is relatively harder to analyze as most of the analytical methods and tools are oriented towards structured data. However, an unstrctured data can be used to obtain structure data, which in turn can be analyzed. For example, an image can be converted to an array of pixels - which will be structured data. Machine learning algorithms can then be used on the array to classify the image as that of a dog or a cat.\nIn this course, we will focus on analyzing structured data."
  },
  {
    "objectID": "Chap 1 Reading data.html#reading-a-csv-file-with-pandas",
    "href": "Chap 1 Reading data.html#reading-a-csv-file-with-pandas",
    "title": "1  Reading data",
    "section": "1.2 Reading a csv file with Pandas",
    "text": "1.2 Reading a csv file with Pandas\nStructured data can be stored in a variety of formats. The most popular format is data_file_name.csv, where the extension csv stands for comma separated values. The variable values of each observation are separated by a comma in a .csv file. In other words, the delimiter is a comma in a csv file. However, the comma is not visible when a .csv file is opened with Microsoft Excel.\n\n1.2.1 Using the read_csv function\nWe will use functions from the Pandas library of Python to read data. Let us import Pandas to use its functions.\n\nimport pandas as pd\n\nNote that pd is the acronym that we will use to call a Pandas function. This acronym can be anything as desired by the user.\nThe function to read a csv file is read_csv(). Let us read the dataset movie_ratings.csv in Python.\n\nmovie_ratings = pd.read_csv('movie_ratings.csv')\n\nNote that the file movie_ratings.csv is stored at the same location as the python script containing the above code. If that is not the case, we’ll need to specify the location of the file as in the following code.\n\nmovie_ratings = pd.read_csv('C:/Users/akl0407/Desktop/STAT303-1/Quarto Book/mybook/movie_ratings.csv')\n\nNote that forward slash is used instead of backslash while specifying the path of the data file. Another option is to use two consecutive backslashes instead of a single forward slash.\n\n\n1.2.2 Specifying the working directory\nIn case we need to read several datasets from a given location, it may be inconvenient to specify the path every time. In such a case we can change the current working directory to the location where the datasets are located.\nWe’ll use the os library of Python to view and/or change the current working directory.\n\nimport os #Importing the 'os' library\nos.getcwd() #Getting the path to the current working directory\n\n'C:\\\\Users\\\\akl0407\\\\Desktop\\\\STAT303-1\\\\Quarto Book\\\\mybook'\n\n\nThe function getcwd() stands for get current working directory.\nSuppose the dataset to be read is located at ‘C:-1Book’. Then, we’ll use the function chdir to change the current working directory to this location.\n\nos.chdir('C:/Users/akl0407/Desktop/STAT303-1/Quarto Book/mybook/Datasets')\n\nNow we can read the dataset from this location without mentioning the entire path as shown below.\n\nmovie_ratings = pd.read_csv('movie_ratings.csv')\n\n\n\n1.2.3 Data overview and summary statistics\nOnce the data has been read, we may want to see what the data looks like. We’ll use another Pandas function head() to view the first few rows of the data.\n\nmovie_ratings.head()\n\n\n\n\n\n  \n    \n      \n      Title\n      US Gross\n      Worldwide Gross\n      Production Budget\n      Release Date\n      MPAA Rating\n      Source\n      Major Genre\n      Creative Type\n      IMDB Rating\n      IMDB Votes\n    \n  \n  \n    \n      0\n      Opal Dreams\n      14443\n      14443\n      9000000\n      Nov 22 2006\n      PG/PG-13\n      Adapted screenplay\n      Drama\n      Fiction\n      6.5\n      468\n    \n    \n      1\n      Major Dundee\n      14873\n      14873\n      3800000\n      Apr 07 1965\n      PG/PG-13\n      Adapted screenplay\n      Western/Musical\n      Fiction\n      6.7\n      2588\n    \n    \n      2\n      The Informers\n      315000\n      315000\n      18000000\n      Apr 24 2009\n      R\n      Adapted screenplay\n      Horror/Thriller\n      Fiction\n      5.2\n      7595\n    \n    \n      3\n      Buffalo Soldiers\n      353743\n      353743\n      15000000\n      Jul 25 2003\n      R\n      Adapted screenplay\n      Comedy\n      Fiction\n      6.9\n      13510\n    \n    \n      4\n      The Last Sin Eater\n      388390\n      388390\n      2200000\n      Feb 09 2007\n      PG/PG-13\n      Adapted screenplay\n      Drama\n      Fiction\n      5.7\n      1012\n    \n  \n\n\n\n\nFor finding the number of rows and columns in the data, you may use the shape() function.\n\n#Finding the shape of movie_ratings dataset\nmovie_ratings.shape\n\n(2228, 11)\n\n\nThe movie_ratings dataset contains 2,809 observations (or rows) and 15 variables (or columns).\nFor obtaining summary statistics of data, you may use the describe() function.\n\na = movie_ratings.describe()\na['Worldwide Gross']-a['Production Budget']\n\ncount    0.000000e+00\nmean     6.377647e+07\nstd      1.270328e+08\nmin      6.660000e+02\n25%      1.207370e+06\n50%      1.666892e+07\n75%      6.700000e+07\nmax      2.467891e+09\ndtype: float64\n\n\n\n#Finding summary statistics of movie_ratings dataset\nmovie_ratings.describe()\n\n\n\n\n\n  \n    \n      \n      US Gross\n      Worldwide Gross\n      Production Budget\n      IMDB Rating\n      IMDB Votes\n    \n  \n  \n    \n      count\n      2.228000e+03\n      2.228000e+03\n      2.228000e+03\n      2228.000000\n      2228.000000\n    \n    \n      mean\n      5.076370e+07\n      1.019370e+08\n      3.816055e+07\n      6.239004\n      33585.154847\n    \n    \n      std\n      6.643081e+07\n      1.648589e+08\n      3.782604e+07\n      1.243285\n      47325.651561\n    \n    \n      min\n      0.000000e+00\n      8.840000e+02\n      2.180000e+02\n      1.400000\n      18.000000\n    \n    \n      25%\n      9.646188e+06\n      1.320737e+07\n      1.200000e+07\n      5.500000\n      6659.250000\n    \n    \n      50%\n      2.838649e+07\n      4.266892e+07\n      2.600000e+07\n      6.400000\n      18169.000000\n    \n    \n      75%\n      6.453140e+07\n      1.200000e+08\n      5.300000e+07\n      7.100000\n      40092.750000\n    \n    \n      max\n      7.601676e+08\n      2.767891e+09\n      3.000000e+08\n      9.200000\n      519541.000000\n    \n  \n\n\n\n\nAnswer the following questions based on the above table."
  },
  {
    "objectID": "Chap 1 Reading data.html#reading-other-data-formats---txt-html-json",
    "href": "Chap 1 Reading data.html#reading-other-data-formats---txt-html-json",
    "title": "1  Reading data",
    "section": "1.3 Reading other data formats - txt, html, json",
    "text": "1.3 Reading other data formats - txt, html, json\nAlthough csv is a very popular format for strucutred data, data is found in several other formats as well. Some of the other data formats are txt, html and json.\n\n1.3.1 Reading txt files\nThe txt format offers some additional flexibility as compared to the csv format. In the csv format, the delimiter is a comma (or the column values are separated by a comma). However, in a txt file, the delimiter can be anything as desired by the user. Let us read the file movie_ratings.txt, where the variable values are separated by a tab character.\n\nmovie_ratings_txt = pd.read_csv('movie_ratings.txt',sep='\\t')\n\nWe use the function read_csv to read a txt file. However, we mention the tab character (’) as a separater of variable values.\nNote that there is no need to remember the argument name - sep for specifying the delimiter. You can always refer to the read_csv() documentation to find the relevant argument.\n\n\n1.3.2 Reading HTML data\nThe Pandas function read_html searches for tabular data, i.e., data contained within the <table> tags of an html file. Let us read the tables in the GDP per capita page on Wikipedia.\n\n#Reading all the tables from the Wikipedia page on GDP per capita\ntables = pd.read_html('https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)_per_capita')\n\nAll the tables will be read and stored in the variable named as tables. Let us find the datatype of the variable tables.\n\n#Finidng datatype of the variable - tables\ntype(tables)\n\nlist\n\n\nThe variable - tables is a list of all the tables read from the HTML data.\n\n#Number of tables read from the page\nlen(tables)\n\n6\n\n\nThe in-built function len can be used to find the length of the list - tables or the number of tables read from the Wikipedia page. Let us check out the first table.\n\n#Checking out the first table. Note that the index of the first table will be 0.\ntables[0]\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      .mw-parser-output .legend{page-break-inside:av...\n      $20,000 - $30,000 $10,000 - $20,000 $5,000 - $...\n      $1,000 - $2,500 $500 - $1,000 <$500 No data\n    \n  \n\n\n\n\nThe above table doesn’t seem to be useful. Let us check out the second table.\n\n#Checking out the second table. Note that the index of the first table will be 1.\ntables[1]\n\n\n\n\n\n  \n    \n      \n      Country/Territory\n      UN Region\n      IMF[4][5]\n      United Nations[6]\n      World Bank[7]\n    \n    \n      \n      Country/Territory\n      UN Region\n      Estimate\n      Year\n      Estimate\n      Year\n      Estimate\n      Year\n    \n  \n  \n    \n      0\n      Liechtenstein *\n      Europe\n      —\n      —\n      180227\n      2020\n      169049\n      2019\n    \n    \n      1\n      Monaco *\n      Europe\n      —\n      —\n      173696\n      2020\n      173688\n      2020\n    \n    \n      2\n      Luxembourg *\n      Europe\n      135046\n      2022\n      117182\n      2020\n      135683\n      2021\n    \n    \n      3\n      Bermuda *\n      Americas\n      —\n      —\n      123945\n      2020\n      110870\n      2021\n    \n    \n      4\n      Ireland *\n      Europe\n      101509\n      2022\n      86251\n      2020\n      85268\n      2020\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      212\n      Central AfricanRepublic *\n      Africa\n      527\n      2022\n      481\n      2020\n      477\n      2020\n    \n    \n      213\n      Sierra Leone *\n      Africa\n      513\n      2022\n      475\n      2020\n      485\n      2020\n    \n    \n      214\n      Madagascar *\n      Africa\n      504\n      2022\n      470\n      2020\n      496\n      2020\n    \n    \n      215\n      South Sudan *\n      Africa\n      393\n      2022\n      1421\n      2020\n      1120\n      2015\n    \n    \n      216\n      Burundi *\n      Africa\n      272\n      2022\n      286\n      2020\n      274\n      2020\n    \n  \n\n217 rows × 8 columns\n\n\n\nThe above table contains the estimated GDP per capita of all countries. This is the table that is likely to be relevant to a user interested in analyzing GDP per capita of countries. Instead of reading all tables of an HTML file, we can focus the search to tables containing certain relevant keywords. Let us try searching all table containing the word ‘Country’.\n\n#Reading all the tables from the Wikipedia page on GDP per capita, containing the word 'Country'\ntables = pd.read_html('https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)_per_capita', match = 'Country')\n\nThe match argument can be used to specify the kewyords to be present in the table to be read.\n\nlen(tables)\n\n1\n\n\nOnly one table contains the keyword - ‘Country’. Let us check out the table obtained.\n\n#Table having the keyword - 'Country' from the HTML page\ntables[0]\n\n\n\n\n\n  \n    \n      \n      Country/Territory\n      UN Region\n      IMF[4][5]\n      United Nations[6]\n      World Bank[7]\n    \n    \n      \n      Country/Territory\n      UN Region\n      Estimate\n      Year\n      Estimate\n      Year\n      Estimate\n      Year\n    \n  \n  \n    \n      0\n      Liechtenstein *\n      Europe\n      —\n      —\n      180227\n      2020\n      169049\n      2019\n    \n    \n      1\n      Monaco *\n      Europe\n      —\n      —\n      173696\n      2020\n      173688\n      2020\n    \n    \n      2\n      Luxembourg *\n      Europe\n      135046\n      2022\n      117182\n      2020\n      135683\n      2021\n    \n    \n      3\n      Bermuda *\n      Americas\n      —\n      —\n      123945\n      2020\n      110870\n      2021\n    \n    \n      4\n      Ireland *\n      Europe\n      101509\n      2022\n      86251\n      2020\n      85268\n      2020\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      212\n      Central AfricanRepublic *\n      Africa\n      527\n      2022\n      481\n      2020\n      477\n      2020\n    \n    \n      213\n      Sierra Leone *\n      Africa\n      513\n      2022\n      475\n      2020\n      485\n      2020\n    \n    \n      214\n      Madagascar *\n      Africa\n      504\n      2022\n      470\n      2020\n      496\n      2020\n    \n    \n      215\n      South Sudan *\n      Africa\n      393\n      2022\n      1421\n      2020\n      1120\n      2015\n    \n    \n      216\n      Burundi *\n      Africa\n      272\n      2022\n      286\n      2020\n      274\n      2020\n    \n  \n\n217 rows × 8 columns\n\n\n\nThe argument match helps with a more focussed search, and helps us discard irrelevant tables.\n\n\n1.3.3 Reading JSON data\nJSON stands for JavaScript Object Notation, in which the data is stored and transmitted as plain text. Since the format is text only, JSON data can easily be exchanged between web applications, and used by any programming language. Unlinke the csv format, JSON supports a hierarchical data structure, and is easier to integrate with APIs.\nLets read JSON data on Ted Talks. The Pandas function [read_json] (https://pandas.pydata.org/docs/reference/api/pandas.read_json.html) converts JSON data to a dataframe.\n\ntedtalks_data = pd.read_json('https://raw.githubusercontent.com/cwkenwaysun/TEDmap/master/data/TED_Talks.json')\n\n\ntedtalks_data.head()\n\n\n\n\n\n  \n    \n      \n      id\n      speaker\n      headline\n      URL\n      description\n      transcript_URL\n      month_filmed\n      year_filmed\n      event\n      duration\n      date_published\n      tags\n      newURL\n      date\n      views\n      rates\n    \n  \n  \n    \n      0\n      7\n      David Pogue\n      Simplicity sells\n      http://www.ted.com/talks/view/id/7\n      New York Times columnist David Pogue takes aim...\n      http://www.ted.com/talks/view/id/7/transcript?...\n      2\n      2006\n      TED2006\n      0:21:26\n      6/27/06\n      simplicity,computers,software,interface design...\n      https://www.ted.com/talks/david_pogue_says_sim...\n      2006-06-27\n      1646773\n      [{'id': 7, 'name': 'Funny', 'count': 968}, {'i...\n    \n    \n      1\n      6\n      Craig Venter\n      Sampling the ocean's DNA\n      http://www.ted.com/talks/view/id/6\n      Genomics pioneer Craig Venter takes a break fr...\n      http://www.ted.com/talks/view/id/6/transcript?...\n      7\n      2005\n      TEDGlobal 2005\n      0:16:51\n      2004/05/07\n      biotech,invention,oceans,genetics,DNA,biology,...\n      https://www.ted.com/talks/craig_venter_on_dna_...\n      2004-05-07\n      562625\n      [{'id': 3, 'name': 'Courageous', 'count': 21},...\n    \n    \n      2\n      4\n      Burt Rutan\n      The real future of space exploration\n      http://www.ted.com/talks/view/id/4\n      In this passionate talk, legendary spacecraft ...\n      http://www.ted.com/talks/view/id/4/transcript?...\n      2\n      2006\n      TED2006\n      0:19:37\n      10/25/06\n      aircraft,flight,industrial design,NASA,rocket ...\n      https://www.ted.com/talks/burt_rutan_sees_the_...\n      2006-10-25\n      2046869\n      [{'id': 3, 'name': 'Courageous', 'count': 169}...\n    \n    \n      3\n      3\n      Ashraf Ghani\n      How to rebuild a broken state\n      http://www.ted.com/talks/view/id/3\n      Ashraf Ghani's passionate and powerful 10-minu...\n      http://www.ted.com/talks/view/id/3/transcript?...\n      7\n      2005\n      TEDGlobal 2005\n      0:18:45\n      10/18/06\n      corruption,poverty,economics,investment,milita...\n      https://www.ted.com/talks/ashraf_ghani_on_rebu...\n      2006-10-18\n      814554\n      [{'id': 3, 'name': 'Courageous', 'count': 140}...\n    \n    \n      4\n      5\n      Chris Bangle\n      Great cars are great art\n      http://www.ted.com/talks/view/id/5\n      American designer Chris Bangle explains his ph...\n      http://www.ted.com/talks/view/id/5/transcript?...\n      2\n      2002\n      TED2002\n      0:20:04\n      2004/05/07\n      cars,industrial design,transportation,inventio...\n      https://www.ted.com/talks/chris_bangle_says_gr...\n      2004-05-07\n      870950\n      [{'id': 1, 'name': 'Beautiful', 'count': 89}, ...\n    \n  \n\n\n\n\n\n\n\n\n\n \n        \n\n\n\n\n1.3.4 Reading data from web APIs\nAPI, an acronym for Application programming interface, is a way of transferring information between systems. Many websites have public APIs that provide data via JSON or other formats. For example, the IMDb-API is a web service for receiving movies, serial, and cast information. API results are in the JSON format and include items such as movie specifications, ratings, Wikipedia page content, etc. One of these APIs contains ratings of the top 250 movies on IMDB. Let us read this data using the IMDB API.\nWe’ll use the get function from the python library requests to request data from the API and obtain a response code. The response code will let us know if our request to pull data from this API was successful.\n\n#Importing the requests library\nimport requests as rq\n\n\n# Downloading imdb top 250 movie's data\nurl = 'https://imdb-api.com/en/API/Top250Movies/k_v6gf8ppf' #URL of the API containing top 250 movies based on IMDB ratings\nresponse = rq.get(url) #Requesting data from the API\nresponse\n\n<Response [200]>\n\n\nWe have a response code of 200, which indicates that the request was successful.\nThe response object’s JSON method will return a dictionary containing JSON parsed into native Python objects.\n\nmovie_data = response.json()\n\n\nmovie_data.keys()\n\ndict_keys(['items', 'errorMessage'])\n\n\nThe movie_data contains only two keys. The items key seems likely to contain information about the top 250 movies. Let us convert the values of the items key (which is list of dictionaries) to a dataframe, so that we can view it in a tabular form.\n\n#Converting a list of dictionaries to a dataframe\nmovie_data_df = pd.DataFrame(movie_data['items'])\n\n\n#Checking the movie data pulled using the API\nmovie_data_df.head()\n\n\n\n\n\n  \n    \n      \n      id\n      rank\n      title\n      fullTitle\n      year\n      image\n      crew\n      imDbRating\n      imDbRatingCount\n    \n  \n  \n    \n      0\n      tt0111161\n      1\n      The Shawshank Redemption\n      The Shawshank Redemption (1994)\n      1994\n      https://m.media-amazon.com/images/M/MV5BMDFkYT...\n      Frank Darabont (dir.), Tim Robbins, Morgan Fre...\n      9.2\n      2624065\n    \n    \n      1\n      tt0068646\n      2\n      The Godfather\n      The Godfather (1972)\n      1972\n      https://m.media-amazon.com/images/M/MV5BM2MyNj...\n      Francis Ford Coppola (dir.), Marlon Brando, Al...\n      9.2\n      1817542\n    \n    \n      2\n      tt0468569\n      3\n      The Dark Knight\n      The Dark Knight (2008)\n      2008\n      https://m.media-amazon.com/images/M/MV5BMTMxNT...\n      Christopher Nolan (dir.), Christian Bale, Heat...\n      9.0\n      2595637\n    \n    \n      3\n      tt0071562\n      4\n      The Godfather Part II\n      The Godfather Part II (1974)\n      1974\n      https://m.media-amazon.com/images/M/MV5BMWMwMG...\n      Francis Ford Coppola (dir.), Al Pacino, Robert...\n      9.0\n      1248050\n    \n    \n      4\n      tt0050083\n      5\n      12 Angry Men\n      12 Angry Men (1957)\n      1957\n      https://m.media-amazon.com/images/M/MV5BMWU4N2...\n      Sidney Lumet (dir.), Henry Fonda, Lee J. Cobb\n      8.9\n      775140\n    \n  \n\n\n\n\n\n#Rows and columns of the movie data\nmovie_data_df.shape\n\n(250, 9)\n\n\nThis API provides the names of the top 250 movies along with the year of release, IMDB ratings, and cast information."
  },
  {
    "objectID": "Chap 1 Reading data.html#writing-data",
    "href": "Chap 1 Reading data.html#writing-data",
    "title": "1  Reading data",
    "section": "1.4 Writing data",
    "text": "1.4 Writing data\nThe Pandas function to_csv can be used to write (or export) data to a csv or txt file. Below are some examples.\nExample 1: Let us export the movies data of the top 250 movies to a csv file.\n\n#Exporting the data of the top 250 movies to a csv file\nmovie_data_df.to_csv('movie_data_exported.csv')\n\nThe file movie_data_exported.csv will appear in the working directory.\nExample 2: Let us export the movies data of the top 250 movies to a txt file with a semi-colon as the delimiter.\n\nmovie_data_df.to_csv('movie_data_exported.txt',sep=';')\n\nExample 3: Let us export the movies data of the top 250 movies to a JSON file.\n\nwith open('movie_data.json', 'w') as f:\n    json.dump(movie_data, f)"
  }
]